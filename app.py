import hmac
import hashlib
import json
import requests
import time
import threading
import os
from flask import Flask, request, jsonify
import logging
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class MexcTradingBot:
    def __init__(self):
        self.api_key = os.getenv('MEXC_API_KEY', '')
        self.api_secret = os.getenv('MEXC_API_SECRET', '')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞
        self.max_position_size = 50  # USD
        self.risk_per_trade = 0.01   # 1%
        
        if not self.api_key or not self.api_secret:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è.")
            self.simulation_mode = True
        else:
            logger.info("‚úÖ –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ MEXC")
            self.simulation_mode = False

    def calculate_position_size(self, current_price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        risk_amount = self.max_position_size * self.risk_per_trade
        
        if current_price <= 0:
            return 0
            
        position_size = risk_amount / current_price
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        min_position = 0.001
        if position_size < min_position:
            position_size = min_position
            
        return round(position_size, 6)

    def get_current_prices(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω bid/ask"""
        try:
            endpoint = "https://api.mexc.com/api/v3/ticker/bookTicker"
            params = {'symbol': symbol}
            
            response = requests.get(endpoint, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                return {
                    'bid': float(data['bidPrice']),
                    'ask': float(data['askPrice']),
                    'bid_qty': float(data['bidQty']),
                    'ask_qty': float(data['askQty'])
                }
            return {'bid': 0, 'ask': 0}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            return {'bid': 0, 'ask': 0}

    def place_real_order(self, symbol: str, side: str, strategy_price: float, qty: float) -> Dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ü–µ–Ω–µ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            prices = self.get_current_prices(symbol)
            current_bid = prices.get('bid', 0)
            current_ask = prices.get('ask', 0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ TradingView
            order_price = strategy_price
            order_type = f"{side} (limit)"
            
            logger.info(f"üí∞ {order_type}: strategy_price={order_price}")
            logger.info(f"üí∞ Market: bid={current_bid}, ask={current_ask}")
            
            endpoint = "https://api.mexc.com/api/v3/order"
            timestamp = str(int(time.time() * 1000))
            
            params = {
                'symbol': symbol,
                'side': side.upper(),
                'type': 'LIMIT',
                'quantity': str(qty),
                'price': str(order_price),
                'timeInForce': 'GTC',
                'recvWindow': '5000',
                'timestamp': timestamp
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = hmac.new(
                self.api_secret.encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            params['signature'] = signature
            
            # MEXC —Ç—Ä–µ–±—É–µ—Ç application/x-www-form-urlencoded, –∞ –Ω–µ JSON
            headers = {
                'X-MEXC-APIKEY': self.api_key,
                'Content-Type': 'application/x-www-form-urlencoded'  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {qty} {symbol} –ø–æ {order_price}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form data, –∞ –Ω–µ JSON
            response = requests.post(
                endpoint, 
                data=params,  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û (–Ω–µ json=)
                headers=headers, 
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {result}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                if result.get('orderId'):
                    self.track_order_execution(symbol, result['orderId'])
                
                return {"status": "success", "real_order": result}
            else:
                error_msg = f"‚ùå MEXC API error: {response.status_code} - {response.text}"
                logger.error(error_msg)
                return {"error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"error": str(e)}

    def track_order_execution(self, symbol: str, order_id: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        def check_order():
            max_checks = 12  # –ú–∞–∫—Å–∏–º—É–º 12 –ø—Ä–æ–≤–µ—Ä–æ–∫ (1 –º–∏–Ω—É—Ç–∞)
            check_interval = 5  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
            for i in range(max_checks):
                time.sleep(check_interval)
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                    order_status = self.get_order_status(symbol, order_id)
                    
                    if order_status.get('status') == 'FILLED':
                        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        return
                    elif order_status.get('status') in ['CANCELED', 'EXPIRED', 'REJECTED']:
                        logger.warning(f"‚ùå –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω: {order_status.get('status')}")
                        # TODO: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                        return
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            
            logger.warning(f"‚è∞ –û—Ä–¥–µ—Ä {order_id} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –∑–∞ {max_checks * check_interval} —Å–µ–∫")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=check_order, daemon=True)
        thread.start()

    def get_order_status(self, symbol: str, order_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            endpoint = "https://api.mexc.com/api/v3/order"
            timestamp = str(int(time.time() * 1000))
            
            params = {
                'symbol': symbol,
                'orderId': order_id,
                'recvWindow': '5000',
                'timestamp': timestamp
            }
            
            query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = hmac.new(
                self.api_secret.encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            params['signature'] = signature
            
            headers = {'X-MEXC-APIKEY': self.api_key}
            
            response = requests.get(endpoint, params=params, headers=headers, timeout=5)
            if response.status_code == 200:
                return response.json()
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {}

    def simulate_order(self, symbol: str, side: str, strategy_price: float, qty: float) -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞"""
        prices = self.get_current_prices(symbol)
        logger.info(f"üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø: {side} {qty} {symbol} –ø–æ —Ü–µ–Ω–µ {strategy_price}")
        logger.info(f"üéÆ Market: bid={prices.get('bid', 0)}, ask={prices.get('ask', 0)}")
        
        return {
            "status": "success",
            "order_id": f"SIM_{int(time.time())}",
            "symbol": symbol,
            "side": side,
            "price": strategy_price,
            "quantity": qty,
            "timestamp": time.time(),
            "note": "–°–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä"
        }

    def place_order(self, symbol: str, side: str, strategy_price: float, qty: float) -> Dict:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        if self.simulation_mode:
            return self.simulate_order(symbol, side, strategy_price, qty)
        else:
            return self.place_real_order(symbol, side, strategy_price, qty)

    def process_tradingview_alert(self, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ—Ç TradingView"""
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TV: {message}")
            
            # –§–æ—Ä–º–∞—Ç: BUY:SYMBOL:PRICE –∏–ª–∏ SELL:SYMBOL:PRICE
            parts = message.split(':')
            
            if len(parts) < 3:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", "received": message}
                
            action = parts[0].strip().upper()
            symbol = parts[1].strip().upper()
            price = float(parts[2].strip())
            
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞: {action} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            qty = self.calculate_position_size(price)
            
            if qty <= 0:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"}
            
            if action == "BUY":
                result = self.place_order(symbol, "BUY", price, qty)
                return {
                    "status": "buy_order_placed", 
                    "symbol": symbol,
                    "strategy_price": price,
                    "quantity": qty,
                    "mode": "REAL" if not self.simulation_mode else "SIMULATION",
                    "result": result
                }
                
            elif action == "SELL":
                result = self.place_order(symbol, "SELL", price, qty)
                return {
                    "status": "sell_order_placed", 
                    "symbol": symbol,
                    "strategy_price": price,
                    "quantity": qty,
                    "mode": "REAL" if not self.simulation_mode else "SIMULATION",
                    "result": result
                }
                
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return {"error": str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = MexcTradingBot()

@app.route('/webhook/tradingview', methods=['POST'])
def tradingview_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç TradingView"""
    try:
        if request.content_type == 'application/json':
            data = request.get_json()
            message = data.get('message', '') if data else ''
        else:
            message = request.get_data(as_text=True)
        
        logger.info(f"üåê –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫. Content-Type: {request.content_type}")
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        if not message:
            return jsonify({"error": "No message received"}), 400
        
        result = bot.process_tradingview_alert(message)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook/test', methods=['POST', 'GET'])
def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    if request.method == 'GET':
        return jsonify({
            "message": "Send POST request with data",
            "examples": {
                "json": '{"message": "BUY:BTCUSDT:50000"}',
                "plain_text": "BUY:BTCUSDT:50000"
            }
        })
    
    if request.content_type == 'application/json':
        data = request.get_json()
        message = data.get('message', '') if data else ''
    else:
        message = request.get_data(as_text=True)
    
    return jsonify({
        "status": "test_received",
        "content_type": request.content_type,
        "message": message,
        "timestamp": time.time()
    })

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "active", 
        "service": "TradingView Webhook Bot",
        "timestamp": time.time(),
        "mode": "REAL" if not bot.simulation_mode else "SIMULATION",
        "endpoints": {
            "webhook": "/webhook/tradingview",
            "test": "/webhook/test",
            "health": "/health"
        }
    })

@app.route('/')
def home():
    return jsonify({
        "service": "TradingView Webhook Bot for MEXC",
        "version": "2.0",
        "mode": "REAL" if not bot.simulation_mode else "SIMULATION",
        "status": "running",
        "usage": "Send POST requests to /webhook/tradingview",
        "message_format": "ACTION:SYMBOL:PRICE",
        "examples": [
            "BUY:BTCUSDT:50000",
            "SELL:ETHUSDT:2500"
        ]
    })

# ---------------- Ping loop ----------------
def ping_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è self-ping —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    PING_URL = "https://tv-webhook-render-mexc.onrender.com/health"
    
    while True:
        try:
            requests.get(PING_URL, timeout=5)
            logger.info("üîÑ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ping failed: {e}")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
ping_thread = threading.Thread(target=ping_loop, daemon=True)
ping_thread.start()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîß –†–µ–∂–∏–º: {'–°–ò–ú–£–õ–Ø–¶–ò–Ø' if bot.simulation_mode else '–†–ï–ê–õ–¨–ù–´–ï –û–†–î–ï–†–ê'}")
    app.run(host='0.0.0.0', port=port, debug=False)