import hmac
import hashlib
import json
import requests
import time
import threading
import os
import csv
from flask import Flask, request, jsonify
import logging
from typing import Dict
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class MexcTradingBot:
    def __init__(self):
        self.api_key = os.getenv('MEXC_API_KEY', '')
        self.api_secret = os.getenv('MEXC_API_SECRET', '')
        
        # CSV –ª–æ–≥
        self.csv_path = "trade_log.csv"
        self.init_csv()
        
        if not self.api_key or not self.api_secret:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è.")
            self.simulation_mode = True
        else:
            logger.info("‚úÖ –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ MEXC")
            self.simulation_mode = False

    def init_csv(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.csv_path):
            with open(self.csv_path, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([
                    "timestamp", "symbol", "action", "strategy_price", 
                    "order_price", "quantity", "bid", "ask", "status", "message"
                ])

    def log_trade(self, symbol: str, action: str, strategy_price: float, order_price: float, 
                 quantity: float, bid: float, ask: float, status: str, message: str):
        """–ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏ –≤ CSV"""
        try:
            with open(self.csv_path, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([
                    datetime.now().isoformat(),
                    symbol,
                    action,
                    strategy_price,
                    order_price,
                    quantity,
                    bid,
                    ask,
                    status,
                    message
                ])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV: {e}")

    def get_current_prices(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω bid/ask"""
        try:
            endpoint = "https://api.mexc.com/api/v3/ticker/bookTicker"
            params = {'symbol': symbol}
            
            response = requests.get(endpoint, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                return {
                    'bid': float(data['bidPrice']),
                    'ask': float(data['askPrice']),
                    'bid_qty': float(data['bidQty']),
                    'ask_qty': float(data['askQty'])
                }
            return {'bid': 0, 'ask': 0}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            return {'bid': 0, 'ask': 0}

    def place_real_order(self, symbol: str, side: str, quantity: float, strategy_price: float) -> Dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –∏ –ª–æ–≥–æ–≤
            prices = self.get_current_prices(symbol)
            current_bid = prices.get('bid', 0)
            current_ask = prices.get('ask', 0)
            
            if current_ask <= 0 or current_bid <= 0:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞
            if side.upper() == "BUY":
                order_price = current_ask  # –ü–æ–∫—É–ø–∞–µ–º –ø–æ –∞—Å–∫—É
                order_type = "BUY"
            else:
                order_price = current_bid  # –ü—Ä–æ–¥–∞–µ–º –ø–æ –±–∏–¥—É
                order_type = "SELL"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (1 USDT)
            order_value = quantity * order_price
            min_usdt_value = 1.0
            
            if order_value < min_usdt_value:
                logger.warning(f"‚ö†Ô∏è –û–±—ä–µ–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {order_value:.2f} USDT")
                # –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –ø—É—Å—Ç—å TradingView –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
                return {"error": f"–û–±—ä–µ–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {order_value:.2f} USDT < {min_usdt_value} USDT"}
            
            logger.info(f"üí∞ {order_type}: strategy_price={strategy_price}, order_price={order_price}, quantity={quantity}")
            logger.info(f"üí∞ Market: bid={current_bid}, ask={current_ask}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä
            timestamp = str(int(time.time() * 1000))
            
            params = {
                'symbol': symbol,
                'side': side.upper(),
                'type': 'LIMIT',
                'timeInForce': 'GTC',
                'quantity': str(round(quantity, 6)),
                'price': str(round(order_price, 6)),
                'timestamp': timestamp,
                'recvWindow': '5000'
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = hmac.new(
                self.api_secret.encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"https://api.mexc.com/api/v3/order?{query_string}&signature={signature}"
            
            headers = {
                'X-MEXC-APIKEY': self.api_key
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {side} {quantity} {symbol} –ø–æ {order_price}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {result}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ä–¥–µ—Ä
                self.log_trade(
                    symbol=symbol,
                    action=side.upper(),
                    strategy_price=strategy_price,
                    order_price=order_price,
                    quantity=quantity,
                    bid=current_bid,
                    ask=current_ask,
                    status="SUCCESS",
                    message=f"Order {result.get('orderId', '')}"
                )
                
                return {"status": "success", "real_order": result}
            else:
                error_msg = f"‚ùå MEXC API error: {response.status_code} - {response.text}"
                logger.error(error_msg)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                self.log_trade(
                    symbol=symbol,
                    action=side.upper(),
                    strategy_price=strategy_price,
                    order_price=order_price,
                    quantity=quantity,
                    bid=current_bid,
                    ask=current_ask,
                    status="ERROR",
                    message=error_msg
                )
                
                return {"error": error_msg}
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞: {e}"
            logger.error(error_msg)
            return {"error": error_msg}

    def process_tradingview_alert(self, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ—Ç TradingView"""
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TV: {message}")
            
            # –§–û–†–ú–ê–¢: ACTION:SYMBOL:QUANTITY:STRATEGY_PRICE
            parts = message.split(':')
            
            if len(parts) < 4:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", "received": message}
                
            action = parts[0].strip().upper()
            symbol = parts[1].strip().upper()
            quantity = float(parts[2].strip())  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–æ–Ω–µ—Ç–∞—Ö
            strategy_price = float(parts[3].strip())  # –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {action} {symbol} qty={quantity} strategy_price={strategy_price}")
            
            if quantity <= 0:
                return {"error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"}
            
            if action == "BUY":
                result = self.place_real_order(symbol, "BUY", quantity, strategy_price)
                return {
                    "status": "buy_order_placed", 
                    "symbol": symbol,
                    "quantity": quantity,
                    "strategy_price": strategy_price,
                    "result": result
                }
                
            elif action == "SELL":
                result = self.place_real_order(symbol, "SELL", quantity, strategy_price)
                return {
                    "status": "sell_order_placed", 
                    "symbol": symbol,
                    "quantity": quantity,
                    "strategy_price": strategy_price,
                    "result": result
                }
                
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return {"error": str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = MexcTradingBot()

@app.route('/')
def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "online",
        "service": "TradingView Webhook to MEXC",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "webhook": "/webhook/tradingview (POST)",
            "logs": "/logs (GET)",
            "health": "/health (GET)",
            "test": "/test (GET)"
        }
    })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "simulation_mode": bot.simulation_mode
    })

@app.route('/test')
def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    test_message = "BUY:XRPUSDT:100:0.5"
    result = bot.process_tradingview_alert(test_message)
    return jsonify({
        "test": "completed",
        "message": test_message,
        "result": result
    })

@app.route('/webhook/tradingview', methods=['POST', 'GET'])
def tradingview_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç TradingView - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        logger.info("=" * 50)
        logger.info("üåê –ù–û–í–´–ô –í–ï–ë–•–£–ö –û–¢ TRADINGVIEW")
        logger.info("=" * 50)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"üì¶ –ú–µ—Ç–æ–¥: {request.method}")
        logger.info(f"üì¶ Headers: {dict(request.headers)}")
        logger.info(f"üì¶ Content-Type: {request.content_type}")
        logger.info(f"üì¶ Args: {request.args}")
        logger.info(f"üì¶ Form: {request.form}")
        
        message = ""
        
        # –í–ê–†–ò–ê–ù–¢ 1: JSON –¥–∞–Ω–Ω—ã–µ
        if request.is_json:
            data = request.get_json()
            logger.info(f"üì¶ JSON –¥–∞–Ω–Ω—ã–µ: {data}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
            if data:
                if 'message' in data:
                    message = data['message']
                elif 'text' in data:
                    message = data['text']
                elif 'alert' in data:
                    message = data['alert']
                elif 'data' in data:
                    message = data['data']
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
                    first_key = next(iter(data.keys())) if data else ""
                    message = data.get(first_key, "")
        
        # –í–ê–†–ò–ê–ù–¢ 2: Form –¥–∞–Ω–Ω—ã–µ
        elif request.form:
            logger.info(f"üì¶ Form –¥–∞–Ω–Ω—ã–µ: {dict(request.form)}")
            if 'message' in request.form:
                message = request.form['message']
            elif 'text' in request.form:
                message = request.form['text']
            else:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                first_key = next(iter(request.form.keys())) if request.form else ""
                message = request.form.get(first_key, "")
        
        # –í–ê–†–ò–ê–ù–¢ 3: Plain text (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
        else:
            message = request.get_data(as_text=True).strip()
            logger.info(f"üì¶ Raw text –¥–∞–Ω–Ω—ã–µ: '{message}'")
        
        logger.info(f"üì® –ò–¢–û–ì–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
        
        if not message:
            error_response = {
                "error": "No message received",
                "details": {
                    "content_type": request.content_type,
                    "method": request.method,
                    "raw_data": request.get_data(as_text=True),
                    "json_available": request.is_json
                }
            }
            logger.error(f"‚ùå {error_response}")
            return jsonify(error_response), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = bot.process_tradingview_alert(message)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        logger.info("=" * 50)
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ï–ë–•–£–ö–ê: {e}")
        return jsonify({
            "error": str(e), 
            "type": type(e).__name__
        }), 500

@app.route('/logs')
def get_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    try:
        if not os.path.exists(bot.csv_path):
            return jsonify({"error": "No logs yet"})
        
        logs = []
        with open(bot.csv_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                logs.append(row)
        
        return jsonify({"logs": logs, "count": len(logs)})
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route('/debug-webhook', methods=['POST'])
def debug_webhook():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç"""
    debug_info = {
        "timestamp": datetime.now().isoformat(),
        "method": request.method,
        "headers": dict(request.headers),
        "content_type": request.content_type,
        "args": dict(request.args),
        "form": dict(request.form),
        "json": request.get_json() if request.is_json else None,
        "raw_data": request.get_data(as_text=True),
        "is_json": request.is_json
    }
    
    logger.info(f"üêõ DEBUG INFO: {json.dumps(debug_info, indent=2)}")
    
    return jsonify(debug_info)

# ---------------- Ping loop ----------------
def ping_loop():
    PING_URL = "https://tv-webhook-render-mexc.onrender.com/health"
    
    while True:
        try:
            requests.get(PING_URL, timeout=5)
            logger.info("üîÑ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ping failed: {e}")
        time.sleep(300)

ping_thread = threading.Thread(target=ping_loop, daemon=True)
ping_thread.start()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)