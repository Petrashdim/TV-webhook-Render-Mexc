import hmac
import hashlib
import json
import requests
import time
import threading
import os
from flask import Flask, request, jsonify
import logging
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class TradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞
        self.max_position_size = 100  # USD
        self.risk_per_trade = 0.02  # 2%
        logger.info("Trading Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def calculate_position_size(self, current_price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        risk_amount = self.max_position_size * self.risk_per_trade
        position_size = risk_amount / current_price
        return round(position_size, 3)

    def simulate_order(self, symbol: str, side: str, price: float, qty: float) -> Dict:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)"""
        try:
            logger.info(f"–°–ò–ú–£–õ–Ø–¶–ò–Ø: {side} {qty} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return {
                "status": "success",
                "order_id": f"SIM_{int(time.time())}",
                "symbol": symbol,
                "side": side,
                "price": price,
                "quantity": qty,
                "timestamp": time.time()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"error": str(e)}

    def process_tradingview_alert(self, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ—Ç TradingView"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TV: {message}")
            
            # –§–æ—Ä–º–∞—Ç: BUY|SYMBOL|PRICE –∏–ª–∏ SELL|SYMBOL|PRICE
            parts = message.split('|')
            
            if len(parts) < 3:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", "received": message}
                
            action = parts[0].strip().upper()  # "BUY" –∏–ª–∏ "SELL"
            symbol = parts[1].strip().upper()  # "BTCUSDT"
            price = float(parts[2].strip())  # —Ü–µ–Ω–∞
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞: {action} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            qty = self.calculate_position_size(price)
            
            if qty <= 0:
                return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"}
            
            if action == "BUY":
                limit_price = price * 0.998  # –ù–∞ 0.2% –Ω–∏–∂–µ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                result = self.simulate_order(symbol, "BUY", limit_price, qty)
                return {
                    "status": "buy_order_placed", 
                    "symbol": symbol,
                    "price": limit_price,
                    "quantity": qty,
                    "result": result
                }
                
            elif action == "SELL":
                limit_price = price * 1.002  # –ù–∞ 0.2% –≤—ã—à–µ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                result = self.simulate_order(symbol, "SELL", limit_price, qty)
                return {
                    "status": "sell_order_placed", 
                    "symbol": symbol,
                    "price": limit_price,
                    "quantity": qty,
                    "result": result
                }
                
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return {"error": str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TradingBot()

@app.route('/webhook/tradingview', methods=['POST'])
def tradingview_webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç TradingView"""
    try:
        # TradingView –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç plain text, –∞ –Ω–µ JSON
        if request.content_type == 'application/json':
            data = request.get_json()
            message = data.get('message', '') if data else ''
        else:
            # –ü–æ–ª—É—á–∞–µ–º raw text –æ—Ç TradingView
            message = request.get_data(as_text=True)
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫. Content-Type: {request.content_type}")
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        if not message:
            return jsonify({"error": "No message received"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç
        result = bot.process_tradingview_alert(message)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook/test', methods=['POST', 'GET'])
def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    if request.method == 'GET':
        return jsonify({
            "message": "Send POST request with data",
            "examples": {
                "json": '{"message": "BUY|BTCUSDT|50000"}',
                "plain_text": "BUY|BTCUSDT|50000"
            }
        })
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if request.content_type == 'application/json':
        data = request.get_json()
        message = data.get('message', '') if data else ''
    else:
        message = request.get_data(as_text=True)
    
    return jsonify({
        "status": "test_received",
        "content_type": request.content_type,
        "message": message,
        "timestamp": time.time()
    })

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "active", 
        "service": "TradingView Webhook Bot",
        "timestamp": time.time(),
        "endpoints": {
            "webhook": "/webhook/tradingview",
            "test": "/webhook/test",
            "health": "/health"
        }
    })

@app.route('/')
def home():
    return jsonify({
        "service": "TradingView Webhook Bot",
        "version": "1.0",
        "status": "running",
        "usage": "Send POST requests to /webhook/tradingview",
        "supported_formats": [
            "application/json: {'message': 'BUY|SYMBOL|PRICE'}",
            "text/plain: BUY|SYMBOL|PRICE"
        ]
    })

# ---------------- Ping loop ----------------
def ping_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è self-ping —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    PING_URL = "https://tv-webhook-render-mexc.onrender.com/health"
    
    while True:
        try:
            requests.get(PING_URL, timeout=5)
            logger.info("üîÑ Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ping failed: {e}")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URL)
# ping_thread = threading.Thread(target=ping_loop, daemon=True)
# ping_thread.start()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)